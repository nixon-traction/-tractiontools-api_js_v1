/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TractionToolsApiV1);
  }
}(this, function(expect, TractionToolsApiV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TractionToolsApiV1.Measurable();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Measurable', function() {
    it('should create an instance of Measurable', function() {
      // uncomment below and update the code to test Measurable
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be.a(TractionToolsApiV1.Measurable);
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property key (base name: "Key")', function() {
      // uncomment below and update the code to test the property key
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "Owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property admin (base name: "Admin")', function() {
      // uncomment below and update the code to test the property admin
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "Target")', function() {
      // uncomment below and update the code to test the property target
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property altTarget (base name: "AltTarget")', function() {
      // uncomment below and update the code to test the property altTarget
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property direction (base name: "Direction")', function() {
      // uncomment below and update the code to test the property direction
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property isDivider (base name: "IsDivider")', function() {
      // uncomment below and update the code to test the property isDivider
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property isReorderable (base name: "IsReorderable")', function() {
      // uncomment below and update the code to test the property isReorderable
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property showCumulative (base name: "ShowCumulative")', function() {
      // uncomment below and update the code to test the property showCumulative
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property cumulative (base name: "Cumulative")', function() {
      // uncomment below and update the code to test the property cumulative
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property cumulativeRange (base name: "CumulativeRange")', function() {
      // uncomment below and update the code to test the property cumulativeRange
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property modifiers (base name: "Modifiers")', function() {
      // uncomment below and update the code to test the property modifiers
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property ordering (base name: "Ordering")', function() {
      // uncomment below and update the code to test the property ordering
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "Disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property generated (base name: "Generated")', function() {
      // uncomment below and update the code to test the property generated
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property isFormula (base name: "IsFormula")', function() {
      // uncomment below and update the code to test the property isFormula
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property average (base name: "Average")', function() {
      // uncomment below and update the code to test the property average
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property showAverage (base name: "ShowAverage")', function() {
      // uncomment below and update the code to test the property showAverage
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property averageRange (base name: "AverageRange")', function() {
      // uncomment below and update the code to test the property averageRange
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property permission (base name: "Permission")', function() {
      // uncomment below and update the code to test the property permission
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

    it('should have the property origins (base name: "Origins")', function() {
      // uncomment below and update the code to test the property origins
      //var instance = new TractionToolsApiV1.Measurable();
      //expect(instance).to.be();
    });

  });

}));
