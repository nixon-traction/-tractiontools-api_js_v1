/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateIssue', 'model/Issue', 'model/UpdateIssue', 'model/UpdateIssueModelCompletion'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateIssue'), require('../model/Issue'), require('../model/UpdateIssue'), require('../model/UpdateIssueModelCompletion'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.IssuesApi = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.CreateIssue, root.TractionToolsApiV1.Issue, root.TractionToolsApiV1.UpdateIssue, root.TractionToolsApiV1.UpdateIssueModelCompletion);
  }
}(this, function(ApiClient, CreateIssue, Issue, UpdateIssue, UpdateIssueModelCompletion) {
  'use strict';

  /**
   * Issues service.
   * @module api/IssuesApi
   * @version v1
   */

  /**
   * Constructs a new IssuesApi. 
   * @alias module:api/IssuesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the issuesComplete operation.
     * @callback module:api/IssuesApi~issuesCompleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark issue as completed
     * @param {Number} ISSUE_ID 
     * @param {module:model/UpdateIssueModelCompletion} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.issuesComplete = function(ISSUE_ID, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'ISSUE_ID' is set
      if (ISSUE_ID === undefined || ISSUE_ID === null) {
        throw new Error("Missing the required parameter 'ISSUE_ID' when calling issuesComplete");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issuesComplete");
      }


      var pathParams = {
        'ISSUE_ID': ISSUE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/issues/{ISSUE_ID}/complete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesCreateIssue operation.
     * @callback module:api/IssuesApi~issuesCreateIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new issue in for a Level 10
     * @param {module:model/CreateIssue} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesCreateIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    this.issuesCreateIssue = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issuesCreateIssue");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Issue;

      return this.apiClient.callApi(
        '/api/v1/issues/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesEditIssue operation.
     * @callback module:api/IssuesApi~issuesEditIssueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an issue
     * @param {Number} ISSUE_ID Issue ID
     * @param {module:model/UpdateIssue} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesEditIssueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.issuesEditIssue = function(ISSUE_ID, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'ISSUE_ID' is set
      if (ISSUE_ID === undefined || ISSUE_ID === null) {
        throw new Error("Missing the required parameter 'ISSUE_ID' when calling issuesEditIssue");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issuesEditIssue");
      }


      var pathParams = {
        'ISSUE_ID': ISSUE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/issues/{ISSUE_ID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGet operation.
     * @callback module:api/IssuesApi~issuesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific issue
     * @param {Number} ISSUE_ID Issue ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    this.issuesGet = function(ISSUE_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ISSUE_ID' is set
      if (ISSUE_ID === undefined || ISSUE_ID === null) {
        throw new Error("Missing the required parameter 'ISSUE_ID' when calling issuesGet");
      }


      var pathParams = {
        'ISSUE_ID': ISSUE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Issue;

      return this.apiClient.callApi(
        '/api/v1/issues/{ISSUE_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGetMineIssues operation.
     * @callback module:api/IssuesApi~issuesGetMineIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issues you own.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesGetMineIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    this.issuesGetMineIssues = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Issue];

      return this.apiClient.callApi(
        '/api/v1/issues/users/mine', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGetUserIssues operation.
     * @callback module:api/IssuesApi~issuesGetUserIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issues owned by a user.
     * @param {Number} USER_ID 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesGetUserIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    this.issuesGetUserIssues = function(USER_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling issuesGetUserIssues");
      }


      var pathParams = {
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Issue];

      return this.apiClient.callApi(
        '/api/v1/issues/users/{USER_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesMoveFromVto operation.
     * @callback module:api/IssuesApi~issuesMoveFromVtoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move issue from VTO
     * @param {Number} ISSUE_ID 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesMoveFromVtoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.issuesMoveFromVto = function(ISSUE_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ISSUE_ID' is set
      if (ISSUE_ID === undefined || ISSUE_ID === null) {
        throw new Error("Missing the required parameter 'ISSUE_ID' when calling issuesMoveFromVto");
      }


      var pathParams = {
        'ISSUE_ID': ISSUE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/issues/{ISSUE_ID}/movefromvto', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesMoveToMeeting operation.
     * @callback module:api/IssuesApi~issuesMoveToMeetingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move issue to another meeting
     * @param {Number} ISSUE_ID 
     * @param {Number} MEETING_ID 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesMoveToMeetingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.issuesMoveToMeeting = function(ISSUE_ID, MEETING_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ISSUE_ID' is set
      if (ISSUE_ID === undefined || ISSUE_ID === null) {
        throw new Error("Missing the required parameter 'ISSUE_ID' when calling issuesMoveToMeeting");
      }

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling issuesMoveToMeeting");
      }


      var pathParams = {
        'ISSUE_ID': ISSUE_ID,
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/issues/{ISSUE_ID}/movetomeeting/{MEETING_ID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesMoveToVto operation.
     * @callback module:api/IssuesApi~issuesMoveToVtoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move issue to VTO
     * @param {Number} ISSUE_ID 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePermission Include permission in the response
     * @param {module:api/IssuesApi~issuesMoveToVtoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.issuesMoveToVto = function(ISSUE_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ISSUE_ID' is set
      if (ISSUE_ID === undefined || ISSUE_ID === null) {
        throw new Error("Missing the required parameter 'ISSUE_ID' when calling issuesMoveToVto");
      }


      var pathParams = {
        'ISSUE_ID': ISSUE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Include_Permission': opts['includePermission']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/issues/{ISSUE_ID}/movetovto', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
