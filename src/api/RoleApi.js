/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Role', 'model/Title'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Role'), require('../model/Title'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.RoleApi = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.Role, root.TractionToolsApiV1.Title);
  }
}(this, function(ApiClient, Role, Title) {
  'use strict';

  /**
   * Role service.
   * @module api/RoleApi
   * @version v1
   */

  /**
   * Constructs a new RoleApi. 
   * @alias module:api/RoleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the roleGetRoles operation.
     * @callback module:api/RoleApi~roleGetRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular role
     * @param {Number} ROLE_ID 
     * @param {module:api/RoleApi~roleGetRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.roleGetRoles = function(ROLE_ID, callback) {
      var postBody = null;

      // verify the required parameter 'ROLE_ID' is set
      if (ROLE_ID === undefined || ROLE_ID === null) {
        throw new Error("Missing the required parameter 'ROLE_ID' when calling roleGetRoles");
      }


      var pathParams = {
        'ROLE_ID': ROLE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/api/v1/role/{ROLE_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the roleRemoveRoles operation.
     * @callback module:api/RoleApi~roleRemoveRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a role from a position
     * @param {Number} ROLE_ID Role ID
     * @param {module:api/RoleApi~roleRemoveRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.roleRemoveRoles = function(ROLE_ID, callback) {
      var postBody = null;

      // verify the required parameter 'ROLE_ID' is set
      if (ROLE_ID === undefined || ROLE_ID === null) {
        throw new Error("Missing the required parameter 'ROLE_ID' when calling roleRemoveRoles");
      }


      var pathParams = {
        'ROLE_ID': ROLE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/role/{ROLE_ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the roleUpdateRoles operation.
     * @callback module:api/RoleApi~roleUpdateRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role
     * @param {Number} ROLE_ID 
     * @param {module:model/Title} body 
     * @param {module:api/RoleApi~roleUpdateRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.roleUpdateRoles = function(ROLE_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'ROLE_ID' is set
      if (ROLE_ID === undefined || ROLE_ID === null) {
        throw new Error("Missing the required parameter 'ROLE_ID' when calling roleUpdateRoles");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling roleUpdateRoles");
      }


      var pathParams = {
        'ROLE_ID': ROLE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/role/{ROLE_ID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
