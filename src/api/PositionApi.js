/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Position', 'model/Role', 'model/Title'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Position'), require('../model/Role'), require('../model/Title'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.PositionApi = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.Position, root.TractionToolsApiV1.Role, root.TractionToolsApiV1.Title);
  }
}(this, function(ApiClient, Position, Role, Title) {
  'use strict';

  /**
   * Position service.
   * @module api/PositionApi
   * @version v1
   */

  /**
   * Constructs a new PositionApi. 
   * @alias module:api/PositionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the positionAddPositionRoles operation.
     * @callback module:api/PositionApi~positionAddPositionRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role for a position
     * @param {Number} POSITION_ID Position ID
     * @param {module:model/Title} body 
     * @param {module:api/PositionApi~positionAddPositionRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.positionAddPositionRoles = function(POSITION_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'POSITION_ID' is set
      if (POSITION_ID === undefined || POSITION_ID === null) {
        throw new Error("Missing the required parameter 'POSITION_ID' when calling positionAddPositionRoles");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling positionAddPositionRoles");
      }


      var pathParams = {
        'POSITION_ID': POSITION_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/api/v1/positions/{POSITION_ID}/roles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionCreatePosition operation.
     * @callback module:api/PositionApi~positionCreatePositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new position
     * @param {module:model/Title} body 
     * @param {module:api/PositionApi~positionCreatePositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.positionCreatePosition = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling positionCreatePosition");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/api/v1/positions/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionGetMinePosition operation.
     * @callback module:api/PositionApi~positionGetMinePositionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Position>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all your positions at the organization
     * @param {module:api/PositionApi~positionGetMinePositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Position>}
     */
    this.positionGetMinePosition = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Position];

      return this.apiClient.callApi(
        '/api/v1/positions/mine', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionGetPositionRoles operation.
     * @callback module:api/PositionApi~positionGetPositionRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of roles for a particular position
     * @param {Number} POSITION_ID 
     * @param {module:api/PositionApi~positionGetPositionRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    this.positionGetPositionRoles = function(POSITION_ID, callback) {
      var postBody = null;

      // verify the required parameter 'POSITION_ID' is set
      if (POSITION_ID === undefined || POSITION_ID === null) {
        throw new Error("Missing the required parameter 'POSITION_ID' when calling positionGetPositionRoles");
      }


      var pathParams = {
        'POSITION_ID': POSITION_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Role];

      return this.apiClient.callApi(
        '/api/v1/positions/{POSITION_ID}/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionGetPositions operation.
     * @callback module:api/PositionApi~positionGetPositionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular position
     * @param {Number} POSITION_ID Position ID
     * @param {module:api/PositionApi~positionGetPositionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.positionGetPositions = function(POSITION_ID, callback) {
      var postBody = null;

      // verify the required parameter 'POSITION_ID' is set
      if (POSITION_ID === undefined || POSITION_ID === null) {
        throw new Error("Missing the required parameter 'POSITION_ID' when calling positionGetPositions");
      }


      var pathParams = {
        'POSITION_ID': POSITION_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/api/v1/positions/{POSITION_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionUpdatePositions operation.
     * @callback module:api/PositionApi~positionUpdatePositionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a position
     * @param {Number} POSITION_ID Position ID
     * @param {module:model/Title} body Position name
     * @param {module:api/PositionApi~positionUpdatePositionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.positionUpdatePositions = function(POSITION_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'POSITION_ID' is set
      if (POSITION_ID === undefined || POSITION_ID === null) {
        throw new Error("Missing the required parameter 'POSITION_ID' when calling positionUpdatePositions");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling positionUpdatePositions");
      }


      var pathParams = {
        'POSITION_ID': POSITION_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/positions/{POSITION_ID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
