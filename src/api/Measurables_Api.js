/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateMeasurable', 'model/Measurable', 'model/Score', 'model/UpdateMeasurable', 'model/UpdateScore'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateMeasurable'), require('../model/Measurable'), require('../model/Score'), require('../model/UpdateMeasurable'), require('../model/UpdateScore'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.Measurables_Api = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.CreateMeasurable, root.TractionToolsApiV1.Measurable, root.TractionToolsApiV1.Score, root.TractionToolsApiV1.UpdateMeasurable, root.TractionToolsApiV1.UpdateScore);
  }
}(this, function(ApiClient, CreateMeasurable, Measurable, Score, UpdateMeasurable, UpdateScore) {
  'use strict';

  /**
   * Measurables_ service.
   * @module api/Measurables_Api
   * @version v1
   */

  /**
   * Constructs a new Measurables_Api. 
   * @alias module:api/Measurables_Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the measurablesCreateMeasurable operation.
     * @callback module:api/Measurables_Api~measurablesCreateMeasurableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Measurable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new measurable
     * @param {module:model/CreateMeasurable} body 
     * @param {module:api/Measurables_Api~measurablesCreateMeasurableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Measurable}
     */
    this.measurablesCreateMeasurable = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling measurablesCreateMeasurable");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Measurable;

      return this.apiClient.callApi(
        '/api/v1/measurables/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the measurablesGet operation.
     * @callback module:api/Measurables_Api~measurablesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Measurable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a measurable
     * @param {Number} MEASURABLE_ID Measurable ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeOrigin 
     * @param {module:api/Measurables_Api~measurablesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Measurable}
     */
    this.measurablesGet = function(MEASURABLE_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'MEASURABLE_ID' is set
      if (MEASURABLE_ID === undefined || MEASURABLE_ID === null) {
        throw new Error("Missing the required parameter 'MEASURABLE_ID' when calling measurablesGet");
      }


      var pathParams = {
        'MEASURABLE_ID': MEASURABLE_ID
      };
      var queryParams = {
        'Include_Origin': opts['includeOrigin'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Measurable;

      return this.apiClient.callApi(
        '/api/v1/measurables/{MEASURABLE_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the measurablesGetMeasurableScores operation.
     * @callback module:api/Measurables_Api~measurablesGetMeasurableScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scores for a particular measurable
     * @param {Number} MEASURABLE_ID Measurable ID
     * @param {module:api/Measurables_Api~measurablesGetMeasurableScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    this.measurablesGetMeasurableScores = function(MEASURABLE_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEASURABLE_ID' is set
      if (MEASURABLE_ID === undefined || MEASURABLE_ID === null) {
        throw new Error("Missing the required parameter 'MEASURABLE_ID' when calling measurablesGetMeasurableScores");
      }


      var pathParams = {
        'MEASURABLE_ID': MEASURABLE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Score];

      return this.apiClient.callApi(
        '/api/v1/measurables/{MEASURABLE_ID}/scores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the measurablesGetMineMeasureables operation.
     * @callback module:api/Measurables_Api~measurablesGetMineMeasureablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Measurable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get measurables that you own
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeOrigin 
     * @param {module:api/Measurables_Api~measurablesGetMineMeasureablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Measurable>}
     */
    this.measurablesGetMineMeasureables = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Include_Origin': opts['includeOrigin'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Measurable];

      return this.apiClient.callApi(
        '/api/v1/measurables/user/mine', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the measurablesGetUserMeasureables operation.
     * @callback module:api/Measurables_Api~measurablesGetUserMeasureablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Measurable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get measurables for a particular user
     * @param {Number} USER_ID User ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeOrigin 
     * @param {module:api/Measurables_Api~measurablesGetUserMeasureablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Measurable>}
     */
    this.measurablesGetUserMeasureables = function(USER_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling measurablesGetUserMeasureables");
      }


      var pathParams = {
        'USER_ID': USER_ID
      };
      var queryParams = {
        'Include_Origin': opts['includeOrigin'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Measurable];

      return this.apiClient.callApi(
        '/api/v1/measurables/user/{USER_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the measurablesUpdateMeasurable operation.
     * @callback module:api/Measurables_Api~measurablesUpdateMeasurableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a measureable
     * @param {Number} MEASURABLE_ID Measurable ID
     * @param {module:model/UpdateMeasurable} body 
     * @param {module:api/Measurables_Api~measurablesUpdateMeasurableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.measurablesUpdateMeasurable = function(MEASURABLE_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'MEASURABLE_ID' is set
      if (MEASURABLE_ID === undefined || MEASURABLE_ID === null) {
        throw new Error("Missing the required parameter 'MEASURABLE_ID' when calling measurablesUpdateMeasurable");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling measurablesUpdateMeasurable");
      }


      var pathParams = {
        'MEASURABLE_ID': MEASURABLE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/measurables/{MEASURABLE_ID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the measurablesUpdateScore operation.
     * @callback module:api/Measurables_Api~measurablesUpdateScoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a score for a particular measureable
     * @param {Number} MEASURABLE_ID Measurable ID
     * @param {Number} WEEK_ID Week ID
     * @param {module:model/UpdateScore} body 
     * @param {module:api/Measurables_Api~measurablesUpdateScoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.measurablesUpdateScore = function(MEASURABLE_ID, WEEK_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'MEASURABLE_ID' is set
      if (MEASURABLE_ID === undefined || MEASURABLE_ID === null) {
        throw new Error("Missing the required parameter 'MEASURABLE_ID' when calling measurablesUpdateScore");
      }

      // verify the required parameter 'WEEK_ID' is set
      if (WEEK_ID === undefined || WEEK_ID === null) {
        throw new Error("Missing the required parameter 'WEEK_ID' when calling measurablesUpdateScore");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling measurablesUpdateScore");
      }


      var pathParams = {
        'MEASURABLE_ID': MEASURABLE_ID,
        'WEEK_ID': WEEK_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/measurables/{MEASURABLE_ID}/week/{WEEK_ID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
