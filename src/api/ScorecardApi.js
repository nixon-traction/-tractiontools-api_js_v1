/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Scorecard'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Scorecard'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.ScorecardApi = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.Scorecard);
  }
}(this, function(ApiClient, Scorecard) {
  'use strict';

  /**
   * Scorecard service.
   * @module api/ScorecardApi
   * @version v1
   */

  /**
   * Constructs a new ScorecardApi. 
   * @alias module:api/ScorecardApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the scorecardGetMeasureablesForUser operation.
     * @callback module:api/ScorecardApi~scorecardGetMeasureablesForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scorecard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} USER_ID 
     * @param {module:api/ScorecardApi~scorecardGetMeasureablesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scorecard}
     */
    this.scorecardGetMeasureablesForUser = function(USER_ID, callback) {
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling scorecardGetMeasureablesForUser");
      }


      var pathParams = {
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Scorecard;

      return this.apiClient.callApi(
        '/api/v1/scorecard/user/{USER_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scorecardGetMineMeasureables operation.
     * @callback module:api/ScorecardApi~scorecardGetMineMeasureablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scorecard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ScorecardApi~scorecardGetMineMeasureablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scorecard}
     */
    this.scorecardGetMineMeasureables = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Scorecard;

      return this.apiClient.callApi(
        '/api/v1/scorecard/user/mine', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scorecardGetScorecardForMeeting operation.
     * @callback module:api/ScorecardApi~scorecardGetScorecardForMeetingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scorecard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} MEETING_ID 
     * @param {module:api/ScorecardApi~scorecardGetScorecardForMeetingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scorecard}
     */
    this.scorecardGetScorecardForMeeting = function(MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling scorecardGetScorecardForMeeting");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Scorecard;

      return this.apiClient.callApi(
        '/api/v1/scorecard/meeting/{MEETING_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
