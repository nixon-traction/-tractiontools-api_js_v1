/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Team', 'model/Title', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Team'), require('../model/Title'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.TeamsApi = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.Team, root.TractionToolsApiV1.Title, root.TractionToolsApiV1.User);
  }
}(this, function(ApiClient, Team, Title, User) {
  'use strict';

  /**
   * Teams service.
   * @module api/TeamsApi
   * @version v1
   */

  /**
   * Constructs a new TeamsApi. 
   * @alias module:api/TeamsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the teamsAddTeam operation.
     * @callback module:api/TeamsApi~teamsAddTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new team
     * @param {module:model/Title} body 
     * @param {module:api/TeamsApi~teamsAddTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    this.teamsAddTeam = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamsAddTeam");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Team;

      return this.apiClient.callApi(
        '/api/v1/teams/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddTeamMember operation.
     * @callback module:api/TeamsApi~teamsAddTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a team
     * @param {Number} TEAM_ID Team ID
     * @param {Number} USER_ID User ID
     * @param {module:api/TeamsApi~teamsAddTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.teamsAddTeamMember = function(TEAM_ID, USER_ID, callback) {
      var postBody = null;

      // verify the required parameter 'TEAM_ID' is set
      if (TEAM_ID === undefined || TEAM_ID === null) {
        throw new Error("Missing the required parameter 'TEAM_ID' when calling teamsAddTeamMember");
      }

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling teamsAddTeamMember");
      }


      var pathParams = {
        'TEAM_ID': TEAM_ID,
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/teams/{TEAM_ID}/member/{USER_ID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetTeamMembers operation.
     * @callback module:api/TeamsApi~teamsGetTeamMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team members
     * @param {Number} TEAM_ID 
     * @param {module:api/TeamsApi~teamsGetTeamMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.teamsGetTeamMembers = function(TEAM_ID, callback) {
      var postBody = null;

      // verify the required parameter 'TEAM_ID' is set
      if (TEAM_ID === undefined || TEAM_ID === null) {
        throw new Error("Missing the required parameter 'TEAM_ID' when calling teamsGetTeamMembers");
      }


      var pathParams = {
        'TEAM_ID': TEAM_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/api/v1/teams/{TEAM_ID}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetTeams operation.
     * @callback module:api/TeamsApi~teamsGetTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular team
     * @param {Number} TEAM_ID Team ID
     * @param {module:api/TeamsApi~teamsGetTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    this.teamsGetTeams = function(TEAM_ID, callback) {
      var postBody = null;

      // verify the required parameter 'TEAM_ID' is set
      if (TEAM_ID === undefined || TEAM_ID === null) {
        throw new Error("Missing the required parameter 'TEAM_ID' when calling teamsGetTeams");
      }


      var pathParams = {
        'TEAM_ID': TEAM_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Team;

      return this.apiClient.callApi(
        '/api/v1/teams/{TEAM_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveTeamMember operation.
     * @callback module:api/TeamsApi~teamsRemoveTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a team member
     * @param {Number} TEAM_ID Team ID
     * @param {Number} USER_ID User ID
     * @param {module:api/TeamsApi~teamsRemoveTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.teamsRemoveTeamMember = function(TEAM_ID, USER_ID, callback) {
      var postBody = null;

      // verify the required parameter 'TEAM_ID' is set
      if (TEAM_ID === undefined || TEAM_ID === null) {
        throw new Error("Missing the required parameter 'TEAM_ID' when calling teamsRemoveTeamMember");
      }

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling teamsRemoveTeamMember");
      }


      var pathParams = {
        'TEAM_ID': TEAM_ID,
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/teams/{TEAM_ID}/member/{USER_ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateTeam operation.
     * @callback module:api/TeamsApi~teamsUpdateTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team
     * @param {Number} TEAM_ID Team ID
     * @param {module:model/Title} body 
     * @param {module:api/TeamsApi~teamsUpdateTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    this.teamsUpdateTeam = function(TEAM_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'TEAM_ID' is set
      if (TEAM_ID === undefined || TEAM_ID === null) {
        throw new Error("Missing the required parameter 'TEAM_ID' when calling teamsUpdateTeam");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamsUpdateTeam");
      }


      var pathParams = {
        'TEAM_ID': TEAM_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Team;

      return this.apiClient.callApi(
        '/api/v1/teams/{TEAM_ID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
