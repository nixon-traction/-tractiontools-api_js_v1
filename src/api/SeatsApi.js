/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Position', 'model/Seat', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Position'), require('../model/Seat'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.SeatsApi = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.Position, root.TractionToolsApiV1.Seat, root.TractionToolsApiV1.User);
  }
}(this, function(ApiClient, Position, Seat, User) {
  'use strict';

  /**
   * Seats service.
   * @module api/SeatsApi
   * @version v1
   */

  /**
   * Constructs a new SeatsApi. 
   * @alias module:api/SeatsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the seatsAttachDirectReport operation.
     * @callback module:api/SeatsApi~seatsAttachDirectReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user below a seat
     * @param {Number} SEAT_ID Seat ID
     * @param {Number} USER_ID User ID
     * @param {module:api/SeatsApi~seatsAttachDirectReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seat}
     */
    this.seatsAttachDirectReport = function(SEAT_ID, USER_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsAttachDirectReport");
      }

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling seatsAttachDirectReport");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID,
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Seat;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}/directreport/{USER_ID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsAttachPosition operation.
     * @callback module:api/SeatsApi~seatsAttachPositionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the position for a seat
     * @param {Number} SEAT_ID Seat ID
     * @param {Number} POSITION_ID Position ID
     * @param {module:api/SeatsApi~seatsAttachPositionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.seatsAttachPosition = function(SEAT_ID, POSITION_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsAttachPosition");
      }

      // verify the required parameter 'POSITION_ID' is set
      if (POSITION_ID === undefined || POSITION_ID === null) {
        throw new Error("Missing the required parameter 'POSITION_ID' when calling seatsAttachPosition");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID,
        'POSITION_ID': POSITION_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}/position/{POSITION_ID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsAttachUser operation.
     * @callback module:api/SeatsApi~seatsAttachUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a user for a seat
     * @param {Number} SEAT_ID Seat ID
     * @param {Number} USER_ID User ID
     * @param {module:api/SeatsApi~seatsAttachUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.seatsAttachUser = function(SEAT_ID, USER_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsAttachUser");
      }

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling seatsAttachUser");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID,
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}/user/{USER_ID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsDetachUser operation.
     * @callback module:api/SeatsApi~seatsDetachUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user from a seat
     * @param {Number} SEAT_ID Seat ID
     * @param {module:api/SeatsApi~seatsDetachUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.seatsDetachUser = function(SEAT_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsDetachUser");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}/user', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsGetPosition operation.
     * @callback module:api/SeatsApi~seatsGetPositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the position attached to a seat
     * @param {Number} SEAT_ID Seat ID
     * @param {module:api/SeatsApi~seatsGetPositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Position}
     */
    this.seatsGetPosition = function(SEAT_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsGetPosition");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}/position', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsGetSeat operation.
     * @callback module:api/SeatsApi~seatsGetSeatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a particular seat
     * @param {Number} SEAT_ID Seat ID
     * @param {module:api/SeatsApi~seatsGetSeatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Seat}
     */
    this.seatsGetSeat = function(SEAT_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsGetSeat");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Seat;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsGetSeatUser operation.
     * @callback module:api/SeatsApi~seatsGetSeatUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user for a seat
     * @param {Number} SEAT_ID Seat ID
     * @param {module:api/SeatsApi~seatsGetSeatUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.seatsGetSeatUser = function(SEAT_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsGetSeatUser");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsGetSeatsForMe operation.
     * @callback module:api/SeatsApi~seatsGetSeatsForMeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Seat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your seats
     * @param {module:api/SeatsApi~seatsGetSeatsForMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Seat>}
     */
    this.seatsGetSeatsForMe = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Seat];

      return this.apiClient.callApi(
        '/api/v1/seats/user/mine', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsGetSeatsForUser operation.
     * @callback module:api/SeatsApi~seatsGetSeatsForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Seat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get seats for a user
     * @param {Number} USER_ID User ID
     * @param {module:api/SeatsApi~seatsGetSeatsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Seat>}
     */
    this.seatsGetSeatsForUser = function(USER_ID, callback) {
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling seatsGetSeatsForUser");
      }


      var pathParams = {
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Seat];

      return this.apiClient.callApi(
        '/api/v1/seats/user/{USER_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsRemovePosition operation.
     * @callback module:api/SeatsApi~seatsRemovePositionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove position for a seat
     * @param {Number} SEAT_ID Seat ID
     * @param {module:api/SeatsApi~seatsRemovePositionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.seatsRemovePosition = function(SEAT_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsRemovePosition");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}/position', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the seatsRemoveSeat operation.
     * @callback module:api/SeatsApi~seatsRemoveSeatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a seat from the accountability chart
     * @param {Number} SEAT_ID Seat ID
     * @param {module:api/SeatsApi~seatsRemoveSeatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.seatsRemoveSeat = function(SEAT_ID, callback) {
      var postBody = null;

      // verify the required parameter 'SEAT_ID' is set
      if (SEAT_ID === undefined || SEAT_ID === null) {
        throw new Error("Missing the required parameter 'SEAT_ID' when calling seatsRemoveSeat");
      }


      var pathParams = {
        'SEAT_ID': SEAT_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/seats/{SEAT_ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
