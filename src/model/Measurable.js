/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NameId', 'model/PermissionDto', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NameId'), require('./PermissionDto'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.Measurable = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.NameId, root.TractionToolsApiV1.PermissionDto, root.TractionToolsApiV1.User);
  }
}(this, function(ApiClient, NameId, PermissionDto, User) {
  'use strict';




  /**
   * The Measurable model module.
   * @module model/Measurable
   * @version v1
   */

  /**
   * Constructs a new <code>Measurable</code>.
   * @alias module:model/Measurable
   * @class
   */
  var exports = function() {
    var _this = this;

























  };

  /**
   * Constructs a <code>Measurable</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Measurable} obj Optional instance to populate.
   * @return {module:model/Measurable} The populated <code>Measurable</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Name')) {
        obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
      }
      if (data.hasOwnProperty('Id')) {
        obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
      }
      if (data.hasOwnProperty('Type')) {
        obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
      }
      if (data.hasOwnProperty('Key')) {
        obj['Key'] = ApiClient.convertToType(data['Key'], 'String');
      }
      if (data.hasOwnProperty('Owner')) {
        obj['Owner'] = User.constructFromObject(data['Owner']);
      }
      if (data.hasOwnProperty('Admin')) {
        obj['Admin'] = User.constructFromObject(data['Admin']);
      }
      if (data.hasOwnProperty('Target')) {
        obj['Target'] = ApiClient.convertToType(data['Target'], 'Number');
      }
      if (data.hasOwnProperty('AltTarget')) {
        obj['AltTarget'] = ApiClient.convertToType(data['AltTarget'], 'Number');
      }
      if (data.hasOwnProperty('Direction')) {
        obj['Direction'] = ApiClient.convertToType(data['Direction'], 'String');
      }
      if (data.hasOwnProperty('IsDivider')) {
        obj['IsDivider'] = ApiClient.convertToType(data['IsDivider'], 'Boolean');
      }
      if (data.hasOwnProperty('IsReorderable')) {
        obj['IsReorderable'] = ApiClient.convertToType(data['IsReorderable'], 'Boolean');
      }
      if (data.hasOwnProperty('ShowCumulative')) {
        obj['ShowCumulative'] = ApiClient.convertToType(data['ShowCumulative'], 'Boolean');
      }
      if (data.hasOwnProperty('Cumulative')) {
        obj['Cumulative'] = ApiClient.convertToType(data['Cumulative'], 'Number');
      }
      if (data.hasOwnProperty('CumulativeRange')) {
        obj['CumulativeRange'] = ApiClient.convertToType(data['CumulativeRange'], 'Date');
      }
      if (data.hasOwnProperty('Modifiers')) {
        obj['Modifiers'] = ApiClient.convertToType(data['Modifiers'], 'String');
      }
      if (data.hasOwnProperty('Ordering')) {
        obj['Ordering'] = ApiClient.convertToType(data['Ordering'], 'Number');
      }
      if (data.hasOwnProperty('Disabled')) {
        obj['Disabled'] = ApiClient.convertToType(data['Disabled'], 'Boolean');
      }
      if (data.hasOwnProperty('Generated')) {
        obj['Generated'] = ApiClient.convertToType(data['Generated'], 'Boolean');
      }
      if (data.hasOwnProperty('IsFormula')) {
        obj['IsFormula'] = ApiClient.convertToType(data['IsFormula'], 'Boolean');
      }
      if (data.hasOwnProperty('Average')) {
        obj['Average'] = ApiClient.convertToType(data['Average'], 'Number');
      }
      if (data.hasOwnProperty('ShowAverage')) {
        obj['ShowAverage'] = ApiClient.convertToType(data['ShowAverage'], 'Boolean');
      }
      if (data.hasOwnProperty('AverageRange')) {
        obj['AverageRange'] = ApiClient.convertToType(data['AverageRange'], 'Date');
      }
      if (data.hasOwnProperty('Permission')) {
        obj['Permission'] = PermissionDto.constructFromObject(data['Permission']);
      }
      if (data.hasOwnProperty('Origins')) {
        obj['Origins'] = ApiClient.convertToType(data['Origins'], [NameId]);
      }
    }
    return obj;
  }

  /**
   * @member {String} Name
   */
  exports.prototype['Name'] = undefined;
  /**
   * @member {Number} Id
   */
  exports.prototype['Id'] = undefined;
  /**
   * @member {String} Type
   */
  exports.prototype['Type'] = undefined;
  /**
   * @member {String} Key
   */
  exports.prototype['Key'] = undefined;
  /**
   * @member {module:model/User} Owner
   */
  exports.prototype['Owner'] = undefined;
  /**
   * @member {module:model/User} Admin
   */
  exports.prototype['Admin'] = undefined;
  /**
   * @member {Number} Target
   */
  exports.prototype['Target'] = undefined;
  /**
   * @member {Number} AltTarget
   */
  exports.prototype['AltTarget'] = undefined;
  /**
   * @member {module:model/Measurable.DirectionEnum} Direction
   */
  exports.prototype['Direction'] = undefined;
  /**
   * @member {Boolean} IsDivider
   */
  exports.prototype['IsDivider'] = undefined;
  /**
   * @member {Boolean} IsReorderable
   */
  exports.prototype['IsReorderable'] = undefined;
  /**
   * @member {Boolean} ShowCumulative
   */
  exports.prototype['ShowCumulative'] = undefined;
  /**
   * @member {Number} Cumulative
   */
  exports.prototype['Cumulative'] = undefined;
  /**
   * @member {Date} CumulativeRange
   */
  exports.prototype['CumulativeRange'] = undefined;
  /**
   * @member {module:model/Measurable.ModifiersEnum} Modifiers
   */
  exports.prototype['Modifiers'] = undefined;
  /**
   * @member {Number} Ordering
   */
  exports.prototype['Ordering'] = undefined;
  /**
   * @member {Boolean} Disabled
   */
  exports.prototype['Disabled'] = undefined;
  /**
   * @member {Boolean} Generated
   */
  exports.prototype['Generated'] = undefined;
  /**
   * @member {Boolean} IsFormula
   */
  exports.prototype['IsFormula'] = undefined;
  /**
   * @member {Number} Average
   */
  exports.prototype['Average'] = undefined;
  /**
   * @member {Boolean} ShowAverage
   */
  exports.prototype['ShowAverage'] = undefined;
  /**
   * @member {Date} AverageRange
   */
  exports.prototype['AverageRange'] = undefined;
  /**
   * @member {module:model/PermissionDto} Permission
   */
  exports.prototype['Permission'] = undefined;
  /**
   * @member {Array.<module:model/NameId>} Origins
   */
  exports.prototype['Origins'] = undefined;


  /**
   * Allowed values for the <code>Direction</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DirectionEnum = {
    /**
     * value: "LessThanOrEqual"
     * @const
     */
    "LessThanOrEqual": "LessThanOrEqual",
    /**
     * value: "LessThan"
     * @const
     */
    "LessThan": "LessThan",
    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",
    /**
     * value: "EqualTo"
     * @const
     */
    "EqualTo": "EqualTo",
    /**
     * value: "GreaterThanNotEqual"
     * @const
     */
    "GreaterThanNotEqual": "GreaterThanNotEqual",
    /**
     * value: "Between"
     * @const
     */
    "Between": "Between"  };

  /**
   * Allowed values for the <code>Modifiers</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ModifiersEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Dollar"
     * @const
     */
    "Dollar": "Dollar",
    /**
     * value: "Percent"
     * @const
     */
    "Percent": "Percent",
    /**
     * value: "Pound"
     * @const
     */
    "Pound": "Pound",
    /**
     * value: "Euros"
     * @const
     */
    "Euros": "Euros"  };


  return exports;
}));


