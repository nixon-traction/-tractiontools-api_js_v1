/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.UpdateMeasurable = factory(root.TractionToolsApiV1.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The UpdateMeasurable model module.
   * @module model/UpdateMeasurable
   * @version v1
   */

  /**
   * Constructs a new <code>UpdateMeasurable</code>.
   * @alias module:model/UpdateMeasurable
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>UpdateMeasurable</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UpdateMeasurable} obj Optional instance to populate.
   * @return {module:model/UpdateMeasurable} The populated <code>UpdateMeasurable</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('direction')) {
        obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
      }
      if (data.hasOwnProperty('target')) {
        obj['target'] = ApiClient.convertToType(data['target'], 'Number');
      }
      if (data.hasOwnProperty('unitType')) {
        obj['unitType'] = ApiClient.convertToType(data['unitType'], 'String');
      }
      if (data.hasOwnProperty('altTarget')) {
        obj['altTarget'] = ApiClient.convertToType(data['altTarget'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The name of the measurable
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:model/UpdateMeasurable.DirectionEnum} direction
   */
  exports.prototype['direction'] = undefined;
  /**
   * @member {Number} target
   */
  exports.prototype['target'] = undefined;
  /**
   * @member {module:model/UpdateMeasurable.UnitTypeEnum} unitType
   */
  exports.prototype['unitType'] = undefined;
  /**
   * @member {Number} altTarget
   */
  exports.prototype['altTarget'] = undefined;


  /**
   * Allowed values for the <code>direction</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DirectionEnum = {
    /**
     * value: "LessThanOrEqual"
     * @const
     */
    "LessThanOrEqual": "LessThanOrEqual",
    /**
     * value: "LessThan"
     * @const
     */
    "LessThan": "LessThan",
    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",
    /**
     * value: "EqualTo"
     * @const
     */
    "EqualTo": "EqualTo",
    /**
     * value: "GreaterThanNotEqual"
     * @const
     */
    "GreaterThanNotEqual": "GreaterThanNotEqual",
    /**
     * value: "Between"
     * @const
     */
    "Between": "Between"  };

  /**
   * Allowed values for the <code>unitType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.UnitTypeEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Dollar"
     * @const
     */
    "Dollar": "Dollar",
    /**
     * value: "Percent"
     * @const
     */
    "Percent": "Percent",
    /**
     * value: "Pound"
     * @const
     */
    "Pound": "Pound",
    /**
     * value: "Euros"
     * @const
     */
    "Euros": "Euros"  };


  return exports;
}));


